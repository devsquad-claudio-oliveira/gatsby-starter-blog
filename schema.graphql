# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

interface Entry {
    contentfulMetadata: ContentfulMetadata!
    sys: Sys!
}

"Represents a binary file in a space. An asset can be any file type."
type Asset {
    contentType(locale: String): String
    contentfulMetadata: ContentfulMetadata!
    description(locale: String): String
    fileName(locale: String): String
    height(locale: String): Int
    linkedFrom(allowedLocales: [String]): AssetLinkingCollections
    size(locale: String): Int
    sys: Sys!
    title(locale: String): String
    url(locale: String, transform: ImageTransformOptions): String
    width(locale: String): Int
}

type AssetCollection {
    items: [Asset]!
    limit: Int!
    skip: Int!
    total: Int!
}

type AssetLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

type ContentfulMetadata {
    tags: [ContentfulTag]!
}

"""

Represents a tag entity for finding and organizing content easily.
Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
    id: String
    name: String
}

type EntryCollection {
    items: [Entry]!
    limit: Int!
    skip: Int!
    total: Int!
}

"List of posts [See type definition](https://app.contentful.com/spaces/m16cvy7nnr8m/content_types/posts)"
type Posts implements Entry {
    contentfulMetadata: ContentfulMetadata!
    linkedFrom(allowedLocales: [String]): PostsLinkingCollections
    postContent(locale: String): PostsPostContent
    postTitle(locale: String): String
    sys: Sys!
}

type PostsCollection {
    items: [Posts]!
    limit: Int!
    skip: Int!
    total: Int!
}

type PostsLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

type PostsPostContent {
    json: JSON!
    links: PostsPostContentLinks!
}

type PostsPostContentAssets {
    block: [Asset]!
    hyperlink: [Asset]!
}

type PostsPostContentEntries {
    block: [Entry]!
    hyperlink: [Entry]!
    inline: [Entry]!
}

type PostsPostContentLinks {
    assets: PostsPostContentAssets!
    entries: PostsPostContentEntries!
}

"List of products. [See type definition](https://app.contentful.com/spaces/m16cvy7nnr8m/content_types/products)"
type Products implements Entry {
    contentfulMetadata: ContentfulMetadata!
    createdAt(locale: String): DateTime
    linkedFrom(allowedLocales: [String]): ProductsLinkingCollections
    productId(locale: String): Int
    productName(locale: String): String
    productValue(locale: String): Float
    sys: Sys!
}

type ProductsCollection {
    items: [Products]!
    limit: Int!
    skip: Int!
    total: Int!
}

type ProductsLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

type Query {
    asset(id: String!, locale: String, preview: Boolean): Asset
    assetCollection(limit: Int = 100, locale: String, order: [AssetOrder], preview: Boolean, skip: Int = 0, where: AssetFilter): AssetCollection
    entryCollection(limit: Int = 100, locale: String, order: [EntryOrder], preview: Boolean, skip: Int = 0, where: EntryFilter): EntryCollection
    posts(id: String!, locale: String, preview: Boolean): Posts
    postsCollection(limit: Int = 100, locale: String, order: [PostsOrder], preview: Boolean, skip: Int = 0, where: PostsFilter): PostsCollection
    products(id: String!, locale: String, preview: Boolean): Products
    productsCollection(limit: Int = 100, locale: String, order: [ProductsOrder], preview: Boolean, skip: Int = 0, where: ProductsFilter): ProductsCollection
    users(id: String!, locale: String, preview: Boolean): Users
    usersCollection(limit: Int = 100, locale: String, order: [UsersOrder], preview: Boolean, skip: Int = 0, where: UsersFilter): UsersCollection
}

type Sys {
    environmentId: String!
    firstPublishedAt: DateTime
    id: String!
    publishedAt: DateTime
    publishedVersion: Int
    spaceId: String!
}

"[See type definition](https://app.contentful.com/spaces/m16cvy7nnr8m/content_types/users)"
type Users implements Entry {
    birthday(locale: String): DateTime
    contentfulMetadata: ContentfulMetadata!
    cpf(locale: String): String
    firstName(locale: String): String
    lastName(locale: String): String
    linkedFrom(allowedLocales: [String]): UsersLinkingCollections
    sys: Sys!
    userId(locale: String): Int
}

type UsersCollection {
    items: [Users]!
    limit: Int!
    skip: Int!
    total: Int!
}

type UsersLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum AssetOrder {
    contentType_ASC
    contentType_DESC
    fileName_ASC
    fileName_DESC
    height_ASC
    height_DESC
    size_ASC
    size_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
    url_ASC
    url_DESC
    width_ASC
    width_DESC
}

enum EntryOrder {
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

enum ImageFormat {
    AVIF
    "JPG image format."
    JPG
    """

    Progressive JPG format stores multiple passes of an image in progressively higher detail.
    When a progressive image is loading, the viewer will first see a lower quality pixelated version which
    will gradually improve in detail, until the image is fully downloaded. This is to display an image as
    early as possible to make the layout look as designed.
    """
    JPG_PROGRESSIVE
    "PNG image format"
    PNG
    """

    8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
    The 8-bit PNG format is mostly used for simple images, such as icons or logos.
    """
    PNG8
    "WebP image format."
    WEBP
}

enum ImageResizeFocus {
    "Focus the resizing on the bottom."
    BOTTOM
    "Focus the resizing on the bottom left."
    BOTTOM_LEFT
    "Focus the resizing on the bottom right."
    BOTTOM_RIGHT
    "Focus the resizing on the center."
    CENTER
    "Focus the resizing on the largest face."
    FACE
    "Focus the resizing on the area containing all the faces."
    FACES
    "Focus the resizing on the left."
    LEFT
    "Focus the resizing on the right."
    RIGHT
    "Focus the resizing on the top."
    TOP
    "Focus the resizing on the top left."
    TOP_LEFT
    "Focus the resizing on the top right."
    TOP_RIGHT
}

enum ImageResizeStrategy {
    "Crops a part of the original image to fit into the specified dimensions."
    CROP
    "Resizes the image to the specified dimensions, cropping the image if needed."
    FILL
    "Resizes the image to fit into the specified dimensions."
    FIT
    """

    Resizes the image to the specified dimensions, padding the image if needed.
    Uses desired background color as padding color.
    """
    PAD
    "Resizes the image to the specified dimensions, changing the original aspect ratio if needed."
    SCALE
    "Creates a thumbnail from the image."
    THUMB
}

enum PostsOrder {
    postTitle_ASC
    postTitle_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

enum ProductsOrder {
    createdAt_ASC
    createdAt_DESC
    productId_ASC
    productId_DESC
    productName_ASC
    productName_DESC
    productValue_ASC
    productValue_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

enum UsersOrder {
    birthday_ASC
    birthday_DESC
    cpf_ASC
    cpf_DESC
    firstName_ASC
    firstName_DESC
    lastName_ASC
    lastName_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
    userId_ASC
    userId_DESC
}

"""

A date-time string at UTC, such as 2007-12-03T10:15:30Z,
compliant with the 'date-time' format outlined in section 5.6 of
the RFC 3339 profile of the ISO 8601 standard for representation
of dates and times using the Gregorian calendar.
"""
scalar DateTime

"The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`."
scalar Dimension

"The 'HexColor' type represents color in `rgb:ffffff` string format."
scalar HexColor

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The 'Quality' type represents quality as whole numeric values between `1` and `100`."
scalar Quality

input AssetFilter {
    AND: [AssetFilter]
    OR: [AssetFilter]
    contentType: String
    contentType_contains: String
    contentType_exists: Boolean
    contentType_in: [String]
    contentType_not: String
    contentType_not_contains: String
    contentType_not_in: [String]
    contentfulMetadata: ContentfulMetadataFilter
    description: String
    description_contains: String
    description_exists: Boolean
    description_in: [String]
    description_not: String
    description_not_contains: String
    description_not_in: [String]
    fileName: String
    fileName_contains: String
    fileName_exists: Boolean
    fileName_in: [String]
    fileName_not: String
    fileName_not_contains: String
    fileName_not_in: [String]
    height: Int
    height_exists: Boolean
    height_gt: Int
    height_gte: Int
    height_in: [Int]
    height_lt: Int
    height_lte: Int
    height_not: Int
    height_not_in: [Int]
    size: Int
    size_exists: Boolean
    size_gt: Int
    size_gte: Int
    size_in: [Int]
    size_lt: Int
    size_lte: Int
    size_not: Int
    size_not_in: [Int]
    sys: SysFilter
    title: String
    title_contains: String
    title_exists: Boolean
    title_in: [String]
    title_not: String
    title_not_contains: String
    title_not_in: [String]
    url: String
    url_contains: String
    url_exists: Boolean
    url_in: [String]
    url_not: String
    url_not_contains: String
    url_not_in: [String]
    width: Int
    width_exists: Boolean
    width_gt: Int
    width_gte: Int
    width_in: [Int]
    width_lt: Int
    width_lte: Int
    width_not: Int
    width_not_in: [Int]
}

input ContentfulMetadataFilter {
    tags: ContentfulMetadataTagsFilter
    tags_exists: Boolean
}

input ContentfulMetadataTagsFilter {
    id_contains_all: [String]
    id_contains_none: [String]
    id_contains_some: [String]
}

input EntryFilter {
    AND: [EntryFilter]
    OR: [EntryFilter]
    contentfulMetadata: ContentfulMetadataFilter
    sys: SysFilter
}

input ImageTransformOptions {
    """

    Desired background color, used with corner radius or `PAD` resize strategy.
    Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
    """
    backgroundColor: HexColor
    """

    Desired corner radius in pixels.
    Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
    Defaults to `0`. Uses desired background color as padding color,
    unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
    """
    cornerRadius: Int
    "Desired image format. Defaults to the original image format."
    format: ImageFormat
    "Desired height in pixels. Defaults to the original image height."
    height: Dimension
    """

    Desired quality of the image in percents.
    Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
    """
    quality: Quality
    "Desired resize focus area. Defaults to `CENTER`."
    resizeFocus: ImageResizeFocus
    "Desired resize strategy. Defaults to `FIT`."
    resizeStrategy: ImageResizeStrategy
    "Desired width in pixels. Defaults to the original image width."
    width: Dimension
}

input PostsFilter {
    AND: [PostsFilter]
    OR: [PostsFilter]
    contentfulMetadata: ContentfulMetadataFilter
    postContent_contains: String
    postContent_exists: Boolean
    postContent_not_contains: String
    postTitle: String
    postTitle_contains: String
    postTitle_exists: Boolean
    postTitle_in: [String]
    postTitle_not: String
    postTitle_not_contains: String
    postTitle_not_in: [String]
    sys: SysFilter
}

input ProductsFilter {
    AND: [ProductsFilter]
    OR: [ProductsFilter]
    contentfulMetadata: ContentfulMetadataFilter
    createdAt: DateTime
    createdAt_exists: Boolean
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    createdAt_in: [DateTime]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_not: DateTime
    createdAt_not_in: [DateTime]
    productId: Int
    productId_exists: Boolean
    productId_gt: Int
    productId_gte: Int
    productId_in: [Int]
    productId_lt: Int
    productId_lte: Int
    productId_not: Int
    productId_not_in: [Int]
    productName: String
    productName_contains: String
    productName_exists: Boolean
    productName_in: [String]
    productName_not: String
    productName_not_contains: String
    productName_not_in: [String]
    productValue: Float
    productValue_exists: Boolean
    productValue_gt: Float
    productValue_gte: Float
    productValue_in: [Float]
    productValue_lt: Float
    productValue_lte: Float
    productValue_not: Float
    productValue_not_in: [Float]
    sys: SysFilter
}

input SysFilter {
    firstPublishedAt: DateTime
    firstPublishedAt_exists: Boolean
    firstPublishedAt_gt: DateTime
    firstPublishedAt_gte: DateTime
    firstPublishedAt_in: [DateTime]
    firstPublishedAt_lt: DateTime
    firstPublishedAt_lte: DateTime
    firstPublishedAt_not: DateTime
    firstPublishedAt_not_in: [DateTime]
    id: String
    id_contains: String
    id_exists: Boolean
    id_in: [String]
    id_not: String
    id_not_contains: String
    id_not_in: [String]
    publishedAt: DateTime
    publishedAt_exists: Boolean
    publishedAt_gt: DateTime
    publishedAt_gte: DateTime
    publishedAt_in: [DateTime]
    publishedAt_lt: DateTime
    publishedAt_lte: DateTime
    publishedAt_not: DateTime
    publishedAt_not_in: [DateTime]
    publishedVersion: Float
    publishedVersion_exists: Boolean
    publishedVersion_gt: Float
    publishedVersion_gte: Float
    publishedVersion_in: [Float]
    publishedVersion_lt: Float
    publishedVersion_lte: Float
    publishedVersion_not: Float
    publishedVersion_not_in: [Float]
}

input UsersFilter {
    AND: [UsersFilter]
    OR: [UsersFilter]
    birthday: DateTime
    birthday_exists: Boolean
    birthday_gt: DateTime
    birthday_gte: DateTime
    birthday_in: [DateTime]
    birthday_lt: DateTime
    birthday_lte: DateTime
    birthday_not: DateTime
    birthday_not_in: [DateTime]
    contentfulMetadata: ContentfulMetadataFilter
    cpf: String
    cpf_contains: String
    cpf_exists: Boolean
    cpf_in: [String]
    cpf_not: String
    cpf_not_contains: String
    cpf_not_in: [String]
    firstName: String
    firstName_contains: String
    firstName_exists: Boolean
    firstName_in: [String]
    firstName_not: String
    firstName_not_contains: String
    firstName_not_in: [String]
    lastName: String
    lastName_contains: String
    lastName_exists: Boolean
    lastName_in: [String]
    lastName_not: String
    lastName_not_contains: String
    lastName_not_in: [String]
    sys: SysFilter
    userId: Int
    userId_exists: Boolean
    userId_gt: Int
    userId_gte: Int
    userId_in: [Int]
    userId_lt: Int
    userId_lte: Int
    userId_not: Int
    userId_not_in: [Int]
}
